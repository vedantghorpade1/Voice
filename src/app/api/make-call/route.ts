import { NextResponse } from "next/server";

export async function POST(req: Request) {
Â  try {
Â  Â  const { to } = await req.json();

Â  Â  // Use your number directly for testing
Â  Â  const destinationNumber = "+919527355763";

Â  Â  // Validate phone number
Â  Â  if (!destinationNumber) {
Â  Â  Â  return NextResponse.json({ error: "Missing 'to' phone number" }, { status: 400 });
Â  Â  }

Â  Â  if (!/^\+\d{10,15}$/.test(destinationNumber)) {
Â  Â  Â  return NextResponse.json({ error: "Invalid phone number format. Use +<country_code><number>." }, { status: 400 });
Â  Â  }

Â  Â  // Load environment variables
Â  Â  const EXOTEL_SID = process.env.EXOTEL_SID;
Â  Â  const EXOTEL_TOKEN = process.env.EXOTEL_TOKEN;
Â  Â  const EXOTEL_PHONE = process.env.EXOTEL_PHONE;
Â  Â  const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY;
Â  Â  const AGENT_ID = process.env.AGENT_ID;
Â  Â  const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL;

Â  Â  if (!EXOTEL_SID || !EXOTEL_TOKEN || !EXOTEL_PHONE || !ELEVENLABS_API_KEY || !AGENT_ID || !BASE_URL) {
Â  Â  Â  return NextResponse.json({ error: "Missing environment variables" }, { status: 500 });
Â  Â  }

Â  Â  console.log("ðŸ§© Env check:", { EXOTEL_SID, EXOTEL_PHONE, AGENT_ID, BASE_URL });

Â  Â  // Get signed ElevenLabs URL
Â  Â  const signedRes = await fetch(
Â  Â  Â  `https://api.elevenlabs.io/v1/convai/conversation/get-signed-url?agent_id=${AGENT_ID}`,
Â  Â  Â  { headers: { "xi-api-key": ELEVENLABS_API_KEY } }
Â  Â  );

Â  Â  if (!signedRes.ok) {
Â  Â  Â  const text = await signedRes.text();
Â  Â  Â  console.error("ElevenLabs error:", text);
Â  Â  Â  return NextResponse.json({ error: "Failed to get signed URL", details: text }, { status: signedRes.status });
Â  Â  }

Â  Â  const signedData = await signedRes.json();
Â  Â  const signed_url = signedData?.signed_url;

Â  Â  if (!signed_url) {
Â  Â  Â  return NextResponse.json({ error: "Signed URL missing in ElevenLabs response" }, { status: 500 });
Â  Â  }

Â  Â  console.log("ðŸ”— ElevenLabs signed URL:", signed_url);

Â  Â  // Prepare Exotel call
Â  Â  const exotelParams = new URLSearchParams();
Â  Â  exotelParams.append("From", EXOTEL_PHONE);
Â  Â  exotelParams.append("To", destinationNumber);
Â  Â  exotelParams.append("CallerId", EXOTEL_PHONE);
Â  Â  exotelParams.append(
Â  Â  Â  "Url",
Â  Â  Â  `${BASE_URL}/api/exotel-websocket?signedUrl=${encodeURIComponent(signed_url)}`
Â  Â  );

Â  Â  const exotelURL = `https://api.exotel.com/v1/Accounts/${EXOTEL_SID}/Calls/connect.json`;
Â  Â  const authHeader = "Basic " + Buffer.from(`${EXOTEL_SID}:${EXOTEL_TOKEN}`).toString("base64");

Â  Â  console.log("ðŸ“ž Calling Exotel:", exotelURL);

Â  Â  const exotelRes = await fetch(exotelURL, {
Â  Â  Â  method: "POST",
Â  Â  Â  headers: {
Â  Â  Â  Â  "Content-Type": "application/x-www-form-urlencoded",
Â  Â  Â  Â  "Authorization": authHeader,
Â  Â  Â  },
Â  Â  Â  body: exotelParams,
Â  Â  });

Â  Â  const rawText = await exotelRes.text();
Â  Â  console.log("ðŸ“¡ Exotel raw response:", rawText);

Â  Â  let exotelData;
Â  Â  try {
Â  Â  Â  exotelData = JSON.parse(rawText);
Â  Â  } catch (err) {
Â  Â  Â  console.error("Failed to parse Exotel response:", err);
Â  Â  Â  return NextResponse.json({ error: "Exotel response not valid JSON", raw: rawText }, { status: 500 });
Â  Â  }

Â  Â  if (!exotelData?.Call?.Sid) {
Â  Â  Â  return NextResponse.json({ error: "Exotel call failed", details: exotelData }, { status: 500 });
Â  Â  }

Â  Â  return NextResponse.json({ success: true, sid: exotelData.Call.Sid });
Â  } catch (err) {
Â  Â  console.error("ðŸ”¥ Server error:", err);
Â  Â  return NextResponse.json({ error: "Internal server error", details: String(err) }, { status: 500 });
Â  }
}
  